import requests
import json


class CVE:
    def __init__(self):
        self.products = []
        self.advisories = []
        self.token = self.open_token()
        self.prod_id = ""
        self.adv_id = ""
        self.advisory = ""

    # def selected_product(self, product):
    #     self.product = product

    def get_product_name(self, input_name):
        self.products = []
        with open('static/products.txt', 'r') as product:
            i = 1
            for p in product:
                if input_name.lower() in p.lower():
                    prod = {
                        "id": i,
                        "product": p
                    }
                    self.products.append(prod)
                    i += 1
        return self.products

    def open_token(self):
        with open("static/token.txt", "r") as file:
            for f in file:
                token = f
        return token

    def get_token(self):
        url = "https://cloudsso.cisco.com/as/token.oauth2"
        client_id = "8smzjznfz8vmrm7qcft458x2"
        client_secret = "uqya83hAxn8R6S9vqZjMYW82"

        params = {
            "grant_type": "client_credentials",
            "client_id": client_id,
            "client_secret": client_secret,
        }

        response = requests.post(url, data=params)
        token = response.json()['access_token']
        with open("static/token.txt", "w") as file:
            file.write(token)
        return token

    def get_advisory(self, product):
        self.advisories = []
        product = product.rstrip()
        product = product.replace(" ", "%20")
        print(f"Encoded Product : {product}")

        url = "https://api.cisco.com/security/advisories/v2/product?product="

        success = False
        while not success:
            print(f"Token : {self.token}")
            headers = {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": f"Bearer {self.token}",
            }
            
            response = requests.get(url+product, headers=headers)
            if response.status_code == 403:
                print("Token Expired")
                self.token = self.get_token()
            elif response.status_code == 406:
                success = True
                advisory = {
                        "id" : 0,
                        "advisory" : "Advisory for this product is not available",
                        "bugid" : "-",
                        "cve" : "-"
                        }
                self.advisories.append(advisory)
            else:
                success = True
                response = response.json()['advisories']
                i = 0
                for r in response:
                    a = r['advisoryTitle']
                    b = r['bugIDs']
                    c = r['cves']
                    advisory = {
                        "id" : i,
                        "advisory" : a,
                        "bugid" : b,
                        "cve" : c
                        }
                    self.advisories.append(advisory)
                    i += 1
        return self.advisories

    def list_cve(self, id):
        cves = []
        for adv in self.advisories:
            if adv["id"] == id:
                for cve in adv['cve']:
                    cves.append(cve)
        
        return cves

    def get_cve(self, cve):
        url = "https://services.nvd.nist.gov/rest/json/cve/1.0/"
        response = requests.get(url + cve)
        json_data = json.loads(response.content)

        description = json_data["result"]["CVE_Items"][0]["cve"]["description"]["description_data"][0]["value"]
        date = json_data["result"]["CVE_data_timestamp"]
        ref_data = json_data["result"]["CVE_Items"][0]["cve"]["references"]["reference_data"]
        links = []
        for ref in ref_data:
            link = ref["url"]
            links.append(link)
                                
        out_cve = {
            "desc" : description,
            "date" : date,
            "links": links 
        }

        return out_cve



# c = CVE()
# a = c.get_advisory("Packaged Contact Center")
# b = c.list_cve(0)
# print(b) 