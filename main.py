from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import Updater, CallbackQueryHandler, CommandHandler, MessageHandler, Filters
from cve import CVE

c = CVE()
TOKEN = '6282225807:AAHprlZDLxhn7OIwQHXcz0B4Aqv5pFjh5uo'
MARKUP_LIMIT = 50

# Define the command handlers for the main menu
def start(update, context):
    main_menu_keyboard = [[InlineKeyboardButton('Search Product', callback_data='product')],
                          [InlineKeyboardButton('Search CVE', callback_data='search_cve')]]
    main_menu_markup = InlineKeyboardMarkup(main_menu_keyboard)
    update.message.reply_text('Welcome to the Main Menu!', reply_markup=main_menu_markup)

def help(update, context):
    update.message.reply_text('This is the help message.')

# Define the command handlers for the submenus
def product(update, context):
    update.callback_query.message.reply_text('Write the product name.\n ie: Catalyst')

def search_cve(update, context):
    update.callback_query.message.reply_text('Enter the CVE.\n ie: CVE-2017-12358')

def list_products(update, context):
    product = update.message.text
    if product[:3].lower() == "cve":
        get_cve_detail(update, context, product)
        return
    products = c.get_product_name(product)
    menu_keyboard = []
    if len(products) > MARKUP_LIMIT:
        update.message.reply_text('List too long, enter more specified keyword')
    else:
        for p in products:
            id = p["id"]
            prod = p['product']
            menu = [InlineKeyboardButton(prod, callback_data=f'getadvisories:{id}')]
            menu_keyboard.append(menu)
    
        menu_markup = InlineKeyboardMarkup(menu_keyboard)
        update.message.reply_text('List of Products:', reply_markup=menu_markup)

def get_advisories(update, context):
    # print("get to cob")
    # print(c.product)

    for p in c.products:
        if p['id'] == c.prod_id:
            product = p['product']

    advisories = c.get_advisory(product)

    if len(advisories) > MARKUP_LIMIT:
        advisories1 = advisories[:MARKUP_LIMIT]
        # advisories2 = advisories[MARKUP_LIMIT:]
        menu_keyboard = []
        for a in advisories1:
            adv = a['advisory']
            id = a['id']
            menu = [InlineKeyboardButton(adv, callback_data=f'getcob:{id}')]
            menu_keyboard.append(menu)
        menu_markup = InlineKeyboardMarkup(menu_keyboard)
        update.callback_query.message.reply_text('List of Advisories:', reply_markup=menu_markup)
        update.callback_query.message.reply_text('List too long, showing top 50')
    else:
        menu_keyboard = []
        for a in advisories:
            adv = a['advisory']
            id = a['id']
            menu = [InlineKeyboardButton(adv, callback_data=f'getcob:{id}')]
            menu_keyboard.append(menu)
        menu_markup = InlineKeyboardMarkup(menu_keyboard)
        update.callback_query.message.reply_text('List of Advisories:', reply_markup=menu_markup)

def get_cob(update, context):
    menu_keyboard = [[InlineKeyboardButton('CVE', callback_data='cve')],
                          [InlineKeyboardButton('Bug ID', callback_data='bugid')]]
    menu_markup = InlineKeyboardMarkup(menu_keyboard)
    for a in c.advisories:
        if a['id'] == c.adv_id:
            advisory = a['advisory']
            c.advisory = advisory
    update.callback_query.message.reply_text(advisory, reply_markup=menu_markup)


def get_cve(update, context):
    menu_keyboard = []
    cves = c.list_cve(c.adv_id)
    for cve in cves:
        menu = [InlineKeyboardButton(cve, callback_data=f'cve_detail:{cve}')]
        menu_keyboard.append(menu)
    # update.callback_query.message.reply_text('CVE')
    menu_markup = InlineKeyboardMarkup(menu_keyboard)
    update.callback_query.message.reply_text(c.advisory, reply_markup=menu_markup)

def get_cve_detail(update, context, cve):
    text = ""
    cve_detail = c.get_cve(cve)
    try:
        update.callback_query.message.reply_text(f"CVE  : {cve}\nDate : {cve_detail['date']}\nDescription :\n{cve_detail['desc']}")
        for link in cve_detail['links']:
            text += f'\n- {link}'
        update.callback_query.message.reply_text(f"Links : {text}")
    except:
        update.message.reply_text(f"CVE  : {cve}\nDate : {cve_detail['date']}\nDescription :\n{cve_detail['desc']}")
        for link in cve_detail['links']:
            text += f'\n- {link}'
        update.message.reply_text(f"Links : {text}")


def get_bug_id(update, context):
    update.callback_query.message.reply_text('Bug ID is not yet available. coming soon!')

# Define the callback handler for inline keyboard button presses
def button_callback(update, context):
    query = update.callback_query
    split_data = query.data.split(":")
    query.data = split_data[0]
    if query.data == 'product':
        product(update, context)
    elif query.data == 'search_cve':
        search_cve(update, context)
    elif query.data == 'getadvisories':
        c.prod_id = int(split_data[1])
        get_advisories(update, context)
    elif query.data == 'getcob':
        c.adv_id = int(split_data[1])
        get_cob(update, context)
    elif query.data == 'cve':
        get_cve(update, context)
    elif query.data == 'bugid':
        get_bug_id(update, context)
    elif query.data == 'cve_detail':
        cve = split_data[1]
        get_cve_detail(update, context, cve)

# Set up the bot
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # Add command handlers for the main menu
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('help', help))
    dp.add_handler(MessageHandler(Filters.text, list_products))

    # Add the callback handler for inline keyboard button presses
    dp.add_handler(CallbackQueryHandler(button_callback))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
